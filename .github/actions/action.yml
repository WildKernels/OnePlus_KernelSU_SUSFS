name: Build
permissions:
  contents: write
  actions: write

inputs:
  model:
    required: true
    type: string
  soc:
    required: true
    type: string
  branch:
    required: true
    type: string
  manifest:
    required: true
    type: string
  android_version:
    required: true
    type: string
  kernel_version:
    required: true
    type: string
  ksun_branch:
    required: true
    type: string
    default: stable
  susfs_branch:
    required: true
    type: string
    default: ""

runs:
  using: composite
  steps:
    - name: Setup Build System
      shell: bash
      run: |
        set -e
        export DEBIAN_FRONTEND=noninteractive
        echo "DEBIAN_FRONTEND=noninteractive" >> "$GITHUB_ENV"
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell /usr/share/swift || true
        sudo docker image prune --all --force || true
        sudo apt-get purge -y aria2 ansible azure-cli shellcheck rpm xorriso zsync esl-erlang firefox google-chrome-stable google-cloud-sdk imagemagick ant kubectl mercurial mono-complete yarn ruby-full subversion mongodb-org microsoft-edge-stable || true
        sudo apt-get autoremove -y
        sudo apt-get autoclean -y
        echo "::endgroup::"
    
    - name: Install Dependencies
      shell: bash
      run: |
        set -e
        sudo apt update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends \
          git curl python3 libelf-dev libelf1 lld build-essential flex bison libssl-dev \
          libncurses-dev liblz4-tool zlib1g-dev libxml2-utils rsync unzip dwarves
        echo "::endgroup::"

    - name: Install Repo Tool
      shell: bash
      run: |
        mkdir -p ./git-repo
        curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
        chmod a+rx ./git-repo/repo
        echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> "$GITHUB_ENV"
        echo "CONFIG=${{ inputs.model }}" >> "$GITHUB_ENV"

    - name: Clone AnyKernel3 and Other Dependencies
      shell: bash
      run: |
        echo "Cloning AnyKernel3 and other dependencies..."
        ANYKERNEL_BRANCH="gki-2.0"
        if [[ -z "${{ inputs.susfs_branch }}" ]]; then
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
        else
          SUSFS_BRANCH="${{ inputs.susfs_branch }}"
        fi
        echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
        echo "Using branch for SUSFS: $SUSFS_BRANCH"
        git clone https://github.com/TheWildJames/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
        git clone https://github.com/TheWildJames/kernel_patches.git
        git clone https://gitlab.com/simonpunk/susfs4ksu.git
        cd susfs4ksu || exit 1
        if git rev-parse --verify "origin/$SUSFS_BRANCH" >/dev/null 2>&1 || git rev-parse --verify "$SUSFS_BRANCH" >/dev/null 2>&1 ; then
          git checkout "$SUSFS_BRANCH"
        else
          echo "Error: '$SUSFS_BRANCH' is neither a valid branch/tag nor a valid commit hash."
          exit 1
        fi

    - name: Initialize and Sync Kernel Source
      shell: bash
      run: |
        echo "Creating folder for configuration: $CONFIG..."
        mkdir -p "$CONFIG"
        cd "$CONFIG"
        echo "Initializing and syncing kernel source..."
        if [[ "${{ inputs.manifest }}" == https://* ]]; then
          mkdir -p .repo/manifests
          curl -Ls ${{ inputs.manifest }} -o .repo/manifests/temp_manifest.xml
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/sm8650 -m temp_manifest.xml --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        else
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b ${{ inputs.branch }} -m ${{ inputs.manifest }} --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        fi
        $REPO --version
        $REPO --trace sync -c --no-clone-bundle --no-tags --optimized-fetch -j$(nproc --all) --fail-fast

    - name: Clean Up ABI Protected Exports
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        rm -f common/android/abi_gki_protected_exports_* || echo "No protected exports in common!"
        rm -f msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports in msm-kernel!"
        df -h

    - name: Add KernelSU Next
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        echo "Adding KernelSU Next..."
        if [ "${{ inputs.ksun_branch }}" == "stable" ]; then
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -
        else
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s ${{ inputs.ksun_branch }}
        fi
        git submodule update --init --recursive

    - name: Apply SUSFS Patches
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        echo "Applying SUSFS patches..."
        cp ../../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
        cp ../../susfs4ksu/kernel_patches/fs/* ./common/fs/
        cp ../../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
        cd ./KernelSU-Next
        susfs_version=$(grep '#define SUSFS_VERSION' ../common/include/linux/susfs.h | awk -F'"' '{print $2}')
        echo "SUSVER=$susfs_version" >> $GITHUB_ENV
        BASE_VERSION=10200
        cd ./kernel
        KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" $BASE_VERSION)
        sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" Makefile
        cd ..
        echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
        echo "KernelSU Next Version: $KSU_VERSION"
        echo "SusFS Version: $susfs_version"
        case "$susfs_version" in
          "v1.5.5"|"v1.5.6"|"v1.5.7")
            cp "../../../kernel_patches/next/0001-kernel-implement-susfs-v1.5.5-v1.5.7-KSUN-v1.0.8.patch" "./ksun_susfs_latest.patch"
            ;;
          "v1.5.8")
            cp ../../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
            patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch  || true
            cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_apk_sign.c.patch" ./
            patch -p1 --forward --fuzz=3 < fix_apk_sign.c.patch
            cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_core_hook.c.patch" ./
            patch -p1 --forward --fuzz=3 < fix_core_hook.c.patch
            cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_selinux.c.patch" ./
            patch -p1 --forward --fuzz=3 < fix_selinux.c.patch
            cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_ksud.c.patch" ./
            patch -p1 --forward --fuzz=3 < fix_ksud.c.patch
            ;;
          "v1.5.9")
            cp ../../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
            patch -p1 --forward < 10_enable_susfs_for_ksu.patch  || true
            for file in $(find ./kernel -maxdepth 2 -name "*.rej" -printf "%f\n" | cut -d'.' -f1); do
              echo "Patching file: $file.c with fix_$file.c.patch"
              patch -p1 --forward < "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_$file.c.patch"
            done
            patch -p1 --forward < "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_kernel_compat.c.patch"
            ;;
          *)
            echo "Invalid version: $susfs_version"
            exit 1
            ;;
        esac
        patch -p1 --forward < ksun_susfs_latest.patch || true
        cd ../common
        if [ "${{ inputs.android_version }}" = "android15" ] && [ "${{ inputs.kernel_version }}" = "6.6" ]; then
          if ! grep -qxF '#include <trace/hooks/fs.h>' ./fs/namespace.c; then
            sed -i '/#include <trace\/hooks\/blk.h>/a #include <trace\/hooks\/fs.h>' ./fs/namespace.c
          fi
        fi
        patch -p1 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch || true
        KERNEL_VERSION="${{ inputs.kernel_version }}"
        MIN_VERSION="5.16"
        if [ "$(printf '%s\n' "$KERNEL_VERSION" "$MIN_VERSION" | sort -V | head -n1)" = "$KERNEL_VERSION" ]; then
          echo "Patching ptrace!"
          patch -p1 -F 3 < "../../../kernel_patches/gki_ptrace.patch"
        else
          echo "Kernel >= $MIN_VERSION, skipping ptrace patch"
        fi
        if [ "${{ inputs.model }}" == "OPAce5Pro" ] || [ "${{ inputs.model }}" == "OP13" ]; then
          echo "Patching hmbird!"
          echo 'obj-y += hmbird_patch.o' >> ./drivers/Makefile
          patch -p1 -F 3 < "../../../kernel_patches/oneplus/hmbird/hmbird_kernel_patch.patch"
          echo "Patching hmbird files!"
          cd ./kernel/sched
          rm -rf ext.c ext.h build_policy.c slim.h slim_sysctl.c
          patch -p1 -F 3 < "../../../../../kernel_patches/oneplus/hmbird/hmbird_files_patch.patch"
        else
          echo "Not OPAce5Pro / OP13 , skipping fengchi patch"
        fi

    - name: Apply KSUN Hooks
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform/common"
        patch -p1 < ../../../kernel_patches/next/scope_min_manual_hooks_v1.4.patch

    - name: Apply Hide Stuff Patches
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform/common"
        cp ../../../kernel_patches/69_hide_stuff.patch ./
        patch -p1 -F 3 < 69_hide_stuff.patch

    - name: Add KernelSU-Next and SUSFS Configuration Settings
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        {
          echo "CONFIG_KSU=y"
          echo "CONFIG_KSU_KPROBES_HOOK=n"
          echo "CONFIG_KSU_SUSFS=y"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y"
          echo "CONFIG_KSU_SUSFS_SUS_SU=n"
          # Mountify Support
          echo "CONFIG_TMPFS_XATTR=y"
          echo "CONFIG_TMPFS_POSIX_ACL=y"
        } >> ./common/arch/arm64/configs/gki_defconfig

    - name: Add Oneplus BBR
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        {
          echo "CONFIG_TCP_CONG_ADVANCED=y"
          echo "CONFIG_TCP_CONG_BBR=y"
          echo "CONFIG_TCP_CONG_BIC=n"
          echo "CONFIG_TCP_CONG_WESTWOOD=n"
          echo "CONFIG_TCP_CONG_HTCP=n"
          echo "CONFIG_NET_SCH_FQ=y"
          echo "CONFIG_NET_SCH_FQ_CODEL=y"          
        } >> ./common/arch/arm64/configs/gki_defconfig
        
    - name: Add TTL Target Support
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        {
          echo "CONFIG_IP_NF_TARGET_TTL=y"
          echo "CONFIG_IP6_NF_TARGET_HL=y"
          echo "CONFIG_IP6_NF_MATCH_HL=y"
        } >> ./common/arch/arm64/configs/gki_defconfig

    - name: Add Build based configs
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        {
          echo "CONFIG_LTO_CLANG_THIN=y"
          echo "CONFIG_LTO_CLANG=y"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n"
          echo "CONFIG_OPTIMIZE_INLINING=y"          
        } >> ./common/arch/arm64/configs/gki_defconfig

    - name: Save Build Metadata
      shell: bash
      id: save_metadata
      run: |
        CONFIG_DIR="$GITHUB_WORKSPACE/${{ env.CONFIG }}"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        mkdir -p "$ARTIFACTS_DIR"
        cd "$CONFIG_DIR/kernel_platform/common"
        CONFIG_FILES=("build.config.common" "build.config.constants")
        BRANCH_LINE=""
        for file in "${CONFIG_FILES[@]}"; do
          if [ -f "$file" ]; then
            line=$(grep '^[[:space:]]*BRANCH=' "$file" | head -n1 || true)
            if [ -n "$line" ]; then
              BRANCH_LINE="$line"; break
            fi
          fi
        done
        if [ -z "$BRANCH_LINE" ]; then
          echo "Error: No BRANCH= found"; exit 1
        fi
        BRANCH_VALUE="${BRANCH_LINE#*=}"
        ANDROID_VERSION="${BRANCH_VALUE%-*}"
        if [ -z "$ANDROID_VERSION" ]; then
          echo "Error: Could not parse android version"; exit 1
        fi
        VERSION=$(grep '^VERSION *=' Makefile | awk '{print $3}')
        PATCHLEVEL=$(grep '^PATCHLEVEL *=' Makefile | awk '{print $3}')
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | awk '{print $3}')
        FULL_VERSION="$VERSION.$PATCHLEVEL.$SUBLEVEL"
        echo "Kernel Version: $ANDROID_VERSION-$FULL_VERSION"
        cd "$ARTIFACTS_DIR"
        echo "$ANDROID_VERSION-$FULL_VERSION" > ${{ inputs.model }}.txt
        echo "ANDROID_VER=$ANDROID_VERSION" >> $GITHUB_ENV

    - name: Customize Kernel Branding
      shell: bash
      run: |
        set -e
        KERNEL_PATH="$GITHUB_WORKSPACE/${{ env.CONFIG }}/kernel_platform"
        COMMON_DIR="$KERNEL_PATH/common"
        cd "$COMMON_DIR"
        mkdir -p out
        CUSTOM_LOCALVERSION="-${ANDROID_VER}-OP-Wild"
        echo "Using CUSTOM_LOCALVERSION=${CUSTOM_LOCALVERSION}"
        echo "CUSTOM_LOCALVERSION=${CUSTOM_LOCALVERSION}" >> "$GITHUB_ENV"

    - name: Detect Clang
      shell: bash
      run: |
        set -e
        KP="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        echo "Searching for Clang in $KP..."
        CLANG_FOUND=false
        for base in "$KP/prebuilts" "$KP/prebuilts-master"; do
          if [ -d "$base/clang/host/linux-x86" ]; then
            cand=$(ls -d "$base"/clang/host/linux-x86/clang-r*/ 2>/dev/null | sort -V | tail -n1 | xargs basename)
            if [ -n "$cand" ]; then
              CLANG_PATH="$base/clang/host/linux-x86/$cand/bin"
              if [ -x "$CLANG_PATH/clang" ]; then
                CLANG_VERSION=$("$CLANG_PATH/clang" --version | head -n1)
                echo "Found Clang: $CLANG_PATH/clang"
                echo "CLANG_BIN_PATH=$CLANG_PATH" >> "$GITHUB_ENV"
                echo "CLANG_VERSION=$CLANG_VERSION" >> "$GITHUB_ENV"
                CLANG_FOUND=true
                break
              fi
            fi
          fi
        done
        if [ "$CLANG_FOUND" = false ]; then
          echo "Error: Clang not found in $KP/prebuilts or $KP/prebuilts-master"
          exit 1
        fi

    - name: Build Kernel
      shell: bash
      run: |
        set -euo pipefail

        CONFIG="${CONFIG:?ENV not set}"
        KP="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        COM="$KP/common"
        OUT="$COM/out"

        if [ -z "${CLANG_BIN_PATH:-}" ] || [ ! -x "${CLANG_BIN_PATH}/clang" ]; then
          echo "ERROR: CLANG_BIN_PATH not set or clang not executable"
          exit 1
        fi
        export PATH="$CLANG_BIN_PATH:$PATH"
        echo "Using toolchain: ${CLANG_VERSION:-unknown}"

        mkdir -p "$OUT"
        cd "$COM"

        export ARCH=arm64 SUBARCH=arm64 LLVM=1
        export LD=ld.lld HOSTLD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip HOSTCC=clang HOSTCXX=clang++
        export CROSS_COMPILE=aarch64-linux-android-
        export CROSS_COMPILE_COMPAT=arm-linux-androidkernel-
        export KCFLAGS="-O2 -pipe -fno-stack-protector -Wno-error"
        export KCPPFLAGS="-DCONFIG_OPTIMIZE_INLINING"

        echo "==> Generating base defconfig..."
        make -j"$(nproc)" O="$OUT" gki_defconfig
        make O="$OUT" olddefconfig

        if [ -n "${CUSTOM_LOCALVERSION:-}" ]; then
          LV="$CUSTOM_LOCALVERSION"
        else
          LV="-${ANDROID_VER:-unknown}-OP-Wild"
        fi
        echo "Applying LOCALVERSION: $LV"
        ./scripts/config --file "$OUT/.config" --set-str LOCALVERSION "$LV"
        ./scripts/config --file "$OUT/.config" -d LOCALVERSION_AUTO || true
        
        make O="$OUT" olddefconfig
        : > .scmversion

        MEM_MB=$(grep MemTotal /proc/meminfo | awk '{print int($2/1024)}')
        CORES=$(nproc)
        MAX_MEM_JOBS=$(( MEM_MB / 2000 ))
        [ $MAX_MEM_JOBS -lt 1 ] && MAX_MEM_JOBS=1
        TARGET_JOBS=$(( CORES - 1 ))
        [ $TARGET_JOBS -lt 1 ] && TARGET_JOBS=1
        if [ $MAX_MEM_JOBS -lt $TARGET_JOBS ]; then
          JOBS=$MAX_MEM_JOBS
        else
          JOBS=$TARGET_JOBS
        fi
        echo "Build resources: Mem=${MEM_MB}MB, Cores=$CORES, Using -j$JOBS"

        echo "==> Building kernel..."
        make -j"$JOBS" O="$OUT"

        IMAGE="$OUT/arch/arm64/boot/Image"
        if [ ! -f "$IMAGE" ]; then
          echo "ERROR: Kernel Image not produced"
          exit 1
        fi
        sha256sum "$IMAGE" | tee "$OUT/Image.sha256"

        cp "$IMAGE" "$GITHUB_WORKSPACE/AnyKernel3/Image"
        echo "Kernel build complete."

    - name: Create Kernel ZIP
      id: create_zip
      shell: bash
      run: |
        set -euo pipefail
        CONFIG_DIR="$GITHUB_WORKSPACE/${{ env.CONFIG }}"
        KERNEL_PATH="$CONFIG_DIR/kernel_platform"
        COMMON_OUT="$KERNEL_PATH/common/out"
        IMAGE_PATH="$COMMON_OUT/arch/arm64/boot/Image"
        if [[ ! -f "$IMAGE_PATH" ]]; then
          echo "ERROR: Built Image not found"; exit 1
        fi
        cp "$IMAGE_PATH" "$GITHUB_WORKSPACE/AnyKernel3/Image"
        cd "$GITHUB_WORKSPACE/AnyKernel3"
        if [ "${{ inputs.model }}" == "OPAce5Pro" ] || [ "${{ inputs.model }}" == "OP13" ]; then
          cp "$GITHUB_WORKSPACE/kernel_patches/oneplus/hmbird/bins/"* ./tools/ 2>/dev/null || true
          patch -F 3 < "$GITHUB_WORKSPACE/kernel_patches/oneplus/hmbird/ak3_hmbird_patch.patch"
        fi
        ZIP_NAME="AnyKernel3_${{ inputs.model }}_${{ inputs.android_version }}-${{ inputs.kernel_version }}_Next_${{ env.KSUVER }}_SUSFS_${{ env.SUSVER }}.zip"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        mkdir -p "$ARTIFACTS_DIR"
        echo "Creating zip file: $ZIP_NAME"
        zip -r "$ARTIFACTS_DIR/$ZIP_NAME" ./*

    - name: Upload Artifacts
      if: success() && steps.create_zip.conclusion == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ env.CONFIG }}
        path: ${{ env.CONFIG }}/artifacts/*
