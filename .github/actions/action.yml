姓名: 构建和发布OnePlus内核

权限:
  contents: 写
  actions: 写

输入:
  model:
    required: 正确
    type: 线
  soc:
    required: 正确
    type: 线
  branch:
    required: 正确
    type: 线
  manifest:
    required: 正确
    type: 线
  ksun_branch:
    required: 正确
    type: 线
    default: 稳定的
  susfs_commit_hash_or_branch:
    required: 假的
    type: 线
    default: ""
  optimize_level:
    required: 假的
    type: 线
    default: O2  # Choices: O2 or O3

输出:
  kernel_version:
    value: ${{ steps.save_metadata.outputs.kernel_version }}
  ksu_version:
    value: ${{ steps.save_metadata.outputs.ksu_version }}
  susfs_version:
    value: ${{ steps.save_metadata.outputs.susfs_version }}
  image_sha256:
    value: ${{ steps.collect_stats.outputs.image_sha256 }}
  warnings:
    value: ${{ steps.collect_stats.outputs.warnings }}

跑步次数:
  using: 复合材料
  steps:
    - 姓名: 验证输入
      shell: 猛击
      run: |
set-euo管道故障
model='${{inputs.model}}'
if[[-z"$model"]]；则
echo“不允许空模型”；退出1
Fi
echo"输入确认OK"

    - 姓名: 安装最小相依性
      shell: 猛击
      run: |
set-euo管道故障
echo"：：group：：Install deps"
sudo apt-get-o获取：：重试次数=3更新-qq
sudo DEBIAN_FRONTEND=非交互式apt-get安装-y--no-install-commends\
git curl ca-certificates build-inessary clang lld flex bison\
libelf-dev libssl-dev libncurses-dev zlib1g-dev liblz4-tool\
libxml2-utils rsync unzip侏儒文件python3
sudo apt-get clean
echo“”：：endgroup：：“”

    - 姓名: 安装基础环境
      shell: 猛击
      run: |
set-euo管道故障
#导出唯一的生成目录名
config="${{inputs.model}}"
echo"CONFIG=$CONFIG">>"$GITHUB_ENV"
#如果缺少repo工具，请安装
repo="/usr/local/bin/repo"
如果[！-x"$REPO"]；然后
curl-s https://storage.googleapis.com/git-repo-downloads/repo-o"$REPO"
chmod+x"$REPO"
Fi
echo"REPO=$REPO">>"$GITHUB_ENV"

    - 姓名: 初始化和同步内核源
      shell: 猛击
      run: |
set-euo管道故障
echo"为配置创建文件夹：$CONFIG"
mkdir-p"$CONFIG"
CD"$CONFIG"
echo"初始化和同步内核源..."
if[["${{inputs.manifest}}"==https://*]]；然后
mkdir-p.repo/manifest
curl--fail-show-error-location-proto'=https'\
"${inputs.manifest}}"-o.repo/manifest/temp_manifest.xml
"$REPO"init-u https://github.com/OnePlusOSS/kernel_manifest.git\
-b oneplus/sm8650-m temp_manifest.xml--repo-rev=v2.16\
--深度=1--无克隆捆绑--无标签
其他
"$REPO"init-u https://github.com/OnePlusOSS/kernel_manifest.git\
-b"${{输入。分支}}"-m"${{输入。清单}}"\
--repo-rev=v2.16--深度=1--无克隆绑定--无标签
Fi
"$REPO"--版本
成功=false
对于123中的i；do
如果“$REPO”sync-c--no-clone-bundle--no-tag--simotized-fetch\
-j"$(nproc-all)"--fail-fast；然后
success=true
打破
Fi
echo"repo同步尝试$i失败；正在重试..."
睡眠30
已完成
$success||{echo“三次repo同步失败”；退出1；}

    - 姓名: 获取内核版本信息
      shell: 猛击
      run: |
set-euo管道故障
config_DIR="$GITHUB_WORKSPACE/$CONFIG"
artifacts_DIR="$CONFIG_DIR/artifacts"
mkdir-p"$ARTIFACTS_DIR"
CD"$CONFIG_DIR/kernel_platform/common"
        CONFIG_FILES=("build.config.common" "build.config.constants")
        BRANCH_LINE=""
        for f in "${CONFIG_FILES[@]}"; do
          if [ -f "$f" ]; then
            l=$(grep '^[[:space:]]*BRANCH=' "$f" || true)
            if [ -n "$l" ]; then BRANCH_LINE="$l"; break; fi
          fi
        done
        if [ -z "$BRANCH_LINE" ]; then
          echo "Error: No BRANCH= found"; exit 1
        fi
        BRANCH_VALUE="${BRANCH_LINE#*=}"
        ANDROID_VERSION="${BRANCH_VALUE%-*}"
        if [ -z "$ANDROID_VERSION" ]; then
          echo "Could not parse android version from BRANCH=$BRANCH_VALUE"
          exit 1
        fi
        VERSION=$(grep '^VERSION *=' Makefile | awk '{print $3}')
        PATCHLEVEL=$(grep '^PATCHLEVEL *=' Makefile | awk '{print $3}')
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | awk '{print $3}')
        FULL_VERSION="$VERSION.$PATCHLEVEL.$SUBLEVEL"
        cd "$ARTIFACTS_DIR"
        echo "$ANDROID_VERSION-$FULL_VERSION" > "${{ inputs.model }}.txt"
        echo "ANDROID_VER=$ANDROID_VERSION" >> "$GITHUB_ENV"
        echo "KERNEL_VER=$VERSION.$PATCHLEVEL" >> "$GITHUB_ENV"
        echo "KERNEL_FULL_VER=$ANDROID_VERSION-$FULL_VERSION" >> "$GITHUB_ENV"
        echo "SUSFS_KERNEL_BRANCH=gki-$ANDROID_VERSION-$VERSION.$PATCHLEVEL" >> "$GITHUB_ENV"

    - name: Clone AnyKernel3 and Other Dependencies
      shell: bash
      run: |
        set -euo pipefail
        echo "Cloning AnyKernel3 and other dependencies..."
        ANYKERNEL_BRANCH="gki-2.0"
        if [[ -z "${{ inputs.susfs_commit_hash_or_branch }}" ]]; then
          SUSFS_BRANCH="${{ env.SUSFS_KERNEL_BRANCH }}"
        else
          SUSFS_BRANCH="${{ inputs.susfs_commit_hash_or_branch }}"
        fi
        echo "Using AnyKernel3 branch: $ANYKERNEL_BRANCH"
        echo "Using SUSFS branch: $SUSFS_BRANCH"
        git clone --depth=1 https://github.com/TheWildJames/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
        git clone --depth=1 https://github.com/TheWildJames/kernel_patches.git
        git clone https://gitlab.com/simonpunk/susfs4ksu.git
        cd susfs4ksu
        if git rev-parse --verify "origin/$SUSFS_BRANCH" >/dev/null 2>&1 || git rev-parse --verify "$SUSFS_BRANCH" >/dev/null 2>&1; then
          git checkout "$SUSFS_BRANCH"
        else
          echo "Error: SUSFS branch or ref '$SUSFS_BRANCH' not found."
          exit 1
        fi

    - name: Clean Up ABI Protected Exports
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        rm -f common/android/abi_gki_protected_exports_* || true
        rm -f msm-kernel/android/abi_gki_protected_exports_* || true
        df -h

    - name: Add KernelSU Next
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        echo "Adding KernelSU Next..."
        if [ "${{ inputs.ksun_branch }}" = "stable" ]; then
          curl --fail --location --proto '=https' \
            -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -
        else
          curl --fail --location --proto '=https' \
            -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s "${{ inputs.ksun_branch }}"
        fi
        git submodule update --init --recursive

    - name: Apply SUSFS Patches
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        echo "Applying SUSFS patches..."
        cp ../../susfs4ksu/kernel_patches/50_add_susfs_in_${{ env.SUSFS_KERNEL_BRANCH }}.patch ./common/
        cp ../../susfs4ksu/kernel_patches/fs/* ./common/fs/
        cp ../../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
        cd ./KernelSU-Next
        susfs_version=$(grep '#define SUSFS_VERSION' ../common/include/linux/susfs.h | awk -F'"' '{print $2}')
        echo "SUSVER=$susfs_version" >> $GITHUB_ENV
        BASE_VERSION=10200
        cd ./kernel
        KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" $BASE_VERSION)
        sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" Makefile
        cd ..
        echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
        echo "KernelSU Next Version: $KSU_VERSION"
        echo "SusFS Version: $susfs_version"
        case "$susfs_version" in
          "v1.5.5"|"v1.5.6"|"v1.5.7")
            cp "../../../kernel_patches/next/0001-kernel-implement-susfs-v1.5.5-v1.5.7-KSUN-v1.0.8.patch" "./ksun_susfs_latest.patch"
            ;;
          "v1.5.8")
            cp ../../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
            patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch  || true
            cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_apk_sign.c.patch" ./
            patch -p1 --forward --fuzz=3 < fix_apk_sign.c.patch
            cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_core_hook.c.patch" ./
            patch -p1 --forward --fuzz=3 < fix_core_hook.c.patch
            cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_selinux.c.patch" ./
            patch -p1 --forward --fuzz=3 < fix_selinux.c.patch
            cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_ksud.c.patch" ./
            patch -p1 --forward --fuzz=3 < fix_ksud.c.patch
            ;;
          "v1.5.9")
            cp ../../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
            patch -p1 --forward < 10_enable_susfs_for_ksu.patch  || true
            for file in $(find ./kernel -maxdepth 2 -name "*.rej" -printf "%f\n" | cut -d'.' -f1); do
              echo "Patching file: $file.c with fix_$file.c.patch"
              patch -p1 --forward < "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_$file.c.patch"
            done
            patch -p1 --forward < "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_kernel_compat.c.patch"
            ;;
          *)
            echo "Invalid version: $susfs_version"
            exit 1
            ;;
        esac
        patch -p1 --forward < ksun_susfs_latest.patch || true
        cd ../common
        if [ "${{ env.ANDROID_VER }}" = "android15" ] && [ "${{ env.KERNEL_VER }}" = "6.6" ]; then
          if ! grep -qxF '#include <trace/hooks/fs.h>' ./fs/namespace.c; then
            sed -i '/#include <trace\/hooks\/blk.h>/a #include <trace\/hooks\/fs.h>' ./fs/namespace.c
          fi
        fi
        patch -p1 < 50_add_susfs_in_${{ env.SUSFS_KERNEL_BRANCH }}.patch || true
        KERNEL_VERSION="${{ env.KERNEL_VER }}"
        MIN_VERSION="5.16"
        if [ "$(printf '%s\n' "$KERNEL_VERSION" "$MIN_VERSION" | sort -V | head -n1)" = "$KERNEL_VERSION" ]; then
          echo "Patching ptrace!"
          patch -p1 -F 3 < "../../../kernel_patches/gki_ptrace.patch"
        else
          echo "Kernel >= $MIN_VERSION, skipping ptrace patch"
        fi
        if [ "${{ inputs.model }}" == "OPAce5Pro" ] || [ "${{ inputs.model }}" == "OP13" ]; then
          echo "Patching hmbird!"
          echo 'obj-y += hmbird_patch.o' >> ./drivers/Makefile
          patch -p1 -F 3 < "../../../kernel_patches/oneplus/hmbird/hmbird_kernel_patch.patch"
          echo "Patching hmbird files!"
          cd ./kernel/sched
          rm -rf ext.c ext.h build_policy.c slim.h slim_sysctl.c
          patch -p1 -F 3 < "../../../../../kernel_patches/oneplus/hmbird/hmbird_files_patch.patch"
        else
          echo "Not OPAce5Pro / OP13 , skipping fengchi patch"
        fi

    - name: Apply KSUN Hooks
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform/common"
        patch -p1 < ../../../kernel_patches/next/scope_min_manual_hooks_v1.4.patch

    - name: Apply Hide Stuff Patches
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform/common"
        cp ../../../kernel_patches/69_hide_stuff.patch ./
        patch -p1 -F 3 < 69_hide_stuff.patch
        
    - name: Add KernelSU-Next and SUSFS Configuration Settings
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        # Remove indentation to avoid leading spaces
        cat >> common/arch/arm64/configs/gki_defconfig <<EOF
        CONFIG_KSU=y
        CONFIG_KSU_KPROBES_HOOK=n
        CONFIG_KSU_SUSFS=y
        CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
        CONFIG_KSU_SUSFS_SUS_PATH=y
        CONFIG_KSU_SUSFS_SUS_MOUNT=y
        CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
        CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
        CONFIG_KSU_SUSFS_SUS_KSTAT=y
        CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
        CONFIG_KSU_SUSFS_TRY_UMOUNT=y
        CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
        CONFIG_KSU_SUSFS_SPOOF_UNAME=y
        CONFIG_KSU_SUSFS_ENABLE_LOG=y
        CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
        CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
        CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
        CONFIG_KSU_SUSFS_SUS_SU=n
        CONFIG_TMPFS_XATTR=y
        CONFIG_TMPFS_POSIX_ACL=y
        EOF

    - name: Add Oneplus BBR
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        cat >> common/arch/arm64/configs/gki_defconfig <<EOF
        CONFIG_TCP_CONG_ADVANCED=y
        CONFIG_TCP_CONG_BBR=y
        CONFIG_NET_SCH_FQ=y
        CONFIG_NET_SCH_FQ_CODEL=y
        EOF

    - name: Add TTL Target Support
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        cat >> common/arch/arm64/configs/gki_defconfig <<EOF
        CONFIG_IP_NF_TARGET_TTL=y
        CONFIG_IP6_NF_TARGET_HL=y
        CONFIG_IP6_NF_MATCH_HL=y
        EOF

    - name: Add Build based configs
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        cat >> common/arch/arm64/configs/gki_defconfig <<EOF
        CONFIG_LTO_CLANG_THIN=y
        CONFIG_LTO_CLANG=y
        CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y
        CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n
        CONFIG_OPTIMIZE_INLINING=y
        EOF

    - name: Save Build Metadata
      id: save_metadata
      shell: bash
      run: |
        set -euo pipefail
        CONFIG_DIR="$GITHUB_WORKSPACE/$CONFIG"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        cd "$ARTIFACTS_DIR"
        echo "kernel_version=${{ env.KERNEL_FULL_VER }}" >> "$GITHUB_OUTPUT"
        echo "ksu_version=${KSUVER:-unknown}" >> "$GITHUB_OUTPUT"
        echo "susfs_version=${SUSVER:-unknown}" >> "$GITHUB_OUTPUT"

    - name: Customize Kernel Branding
      shell: bash
      run: |
        set -euo pipefail
        KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        cd "$KERNEL_PATH/common"
        mkdir -p out
        CUSTOM_LOCALVERSION="-${ANDROID_VER}-ZIYU"
        echo "CUSTOM_LOCALVERSION=$CUSTOM_LOCALVERSION" >> "$GITHUB_ENV"

    - name: Detect Clang (toolchain for build)
      shell: bash
      run: |
        set -euo pipefail
        KP="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        CLANG_FOUND=false
        for base in "$KP/prebuilts" "$KP/prebuilts-master"; do
          [ -d "$base/clang/host/linux-x86" ] || continue
          latest=$(ls -d "$base"/clang/host/linux-x86/clang-r*/ 2>/dev/null | sort -V | tail -n1 || true)
          if [ -n "$latest" ] && [ -x "$latest/bin/clang" ]; then
            CLANG_BIN="$latest/bin"
            CLANG_FOUND=true
          fi
        done
        if ! $CLANG_FOUND && command -v clang >/dev/null 2>&1; then
          CLANG_BIN="$(dirname "$(command -v clang)")"
          CLANG_FOUND=true
          echo "Using system clang."
        fi
        $CLANG_FOUND || { echo "No clang toolchain found"; exit 1; }
        echo "CLANG_BIN_PATH=$CLANG_BIN" >> "$GITHUB_ENV"
        CLANG_VERSION="$("$CLANG_BIN/clang" --version | head -n1)"
        echo "CLANG_VERSION=$CLANG_VERSION" >> "$GITHUB_ENV"
        echo "Detected Clang: $CLANG_VERSION"

    - name: Build Kernel
      shell: bash
      run: |
        set -euo pipefail
        KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        COMMON="$KERNEL_PATH/common"
        cd "$COMMON"
        : > "$COMMON/.scmversion"
        if [ -n "${CLANG_BIN_PATH:-}" ] && [ -x "${CLANG_BIN_PATH}/clang" ]; then
          export PATH="${CLANG_BIN_PATH}:$PATH"
        fi
        export LLVM=1 LLVM_IAS=1
        export ARCH=arm64 SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-android-
        export CROSS_COMPILE_COMPAT=arm-linux-androideabi-
        export LD=ld.lld HOSTLD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip HOSTCC=clang HOSTCXX=clang++
        export CC=clang
        OUT=out
        mkdir -p "$OUT"
        make O="$OUT" gki_defconfig
        if [ -n "${CUSTOM_LOCALVERSION:-}" ]; then
          scripts/config --file "$OUT/.config" --set-str LOCALVERSION "${CUSTOM_LOCALVERSION}"
scripts/config-file"$OUT/.config"-d localversion_AUTO||true
SED-i's/scm_version="$(scm_version-short)"/scm_version=""/'脚本/setlocalversion
Fi
如果["${{inputs.optimize_level}}"="O3"]；则
scripts/config-file"$OUT/.config"-d CC_OPTIMIZE_FOR_PERFORMANCE
scripts/config-file"$OUT/.config"-e CC_OPTIMIZE_FOR_PERFORMANCE_O3
导出KCFLAGS="-Wno-Error-pipe-O3-fno-stack-protector"
其他
scripts/config-file"$OUT/.config"-e CC_OPTIMIZE_FOR_PERFORMANCE
scripts/config-file"$OUT/.config"-d CC_OPTIMIZE_FOR_PERFORMANCE_O3
导出KCFLAGS="-Wno-错误-管道-O2-fno-堆栈保护器"
Fi
导出KCPPFLAGS="-DCONFIG_OPTIMIZE_inlining"
使O="$OUT"olddefconfig
回声"正在使用$(nproc-all)线程开始生成..."
set-o管道故障
make-j"$(nproc-all)"O="$OUT"2>&1|tee build.log
IMG="$OUT/arch/arm64/boot/映像"
如果[！-f"$IMG"]；然后
回显“缺少内核映像”；退出1
Fi
sha256sum"$IMG"|T形"$OUT/Image.sha256"

    - 姓名: 收集构建统计信息/验证映像
身份标识: collect_stats:collect_stats
壳: 猛击:猛击
跑: |
set-euo管道故障
kernel_PATH="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
常见的="$KERNEL_PATH/common"
从……里面出去="$COMMON/out"
IMG="$OUT/arch/arm64/boot/映像"
警告=$(grep-i-E'警告：'"$COMMON/build.log"|wc-l||true)
回声"$WARNINGS">"$OUT/warnings.txt"
文件"$IMG">"$OUT/Image.file"
kernel_UNAME=$(字符串"$IMG"|grep-E'Linux版本.*#'|tail-n1)
回声"内核未命名：$kernel_UNAME"
回声"KERNEL_UNAME=$KERNEL_UNAME">>"$GITHUB_ENV"
if！文件"$IMG"|grep-qi'ARM64'；则
回声"图像似乎不是ARM64："
文件"$IMG"
出口1
Fi
min_SIZE=$((6*1024*1024))
actual_SIZE=$(STAT-C%s"$IMG")
如果["$ACTUAL_SIZE"-<"$MIN_SIZE"]；则
回声"图像大小$actual_SIZE<$MIN_SIZE(可疑)"；退出1
Fi
image_SHA256=$(剪切-d"-f1"$OUT/Image.sha256")
回声"图像sha256：$IMAGE_SHA256"
回声"警告=$WARNINGS">>"$GITHUB_OUTPUT"
回声"image_sha256=$IMAGE_SHA256">>"$GITHUB_OUTPUT"

    - 姓名: 创建内核ZIP
身份标识: 创建zip(_Z):创建zip(_Z)
壳: 猛击:猛击
跑: |
set-euo管道故障
config_DIR="$GITHUB_WORKSPACE/$CONFIG"
image_PATH="$CONFIG_DIR/kernel_platform/common/out/arch/arm64/boot/Image"
如果[！-f"$IMAGE_PATH"]；则
回声"错误：未找到生成图像"
出口1
Fi
    
#将图像放入AnyKernel3#将映像放入AnyKernel3
CP"$IMAGE_PATH""$GITHUB_WORKSPACE/AnyKernel3/Image""$IMAGE_PATH" "$GITHUB_WORKSPACE/AnyKernel3/Image"
CD"$GITHUB_WORKSPACE/AnyKernel3""$GITHUB_WORKSPACE/AnyKernel3"
    
#可选的hmbird补丁逻辑#可选的hmbird补丁逻辑
如果["${{inputs.model}}"="${{inputs.model}}"]="OPAce5Pro""${{inputs.Model}}"="OP13"]||[ "${{inputs.model}}"="OP13" ]；然后[ "${{inputs.model}}"="OP13" ]；然后
CP"$GITHUB_WORKSPACE/kernel_patches/oneplus/hmbird/bin/"*./tools/2>/dev/null||true"$GITHUB_WORKSPACE/kernel_patches/oneplus/hmbird/bin/"*./tools/2>/dev/null||true
patch-F3<"$GITHUB_WORKSPACE/kernel_patches/oneplus/hmbird/AK3_hmbird_patch。补丁""$GITHUB_WORKSPACE/kernel_patches/oneplus/hmbird/AK3_hmbird_patch。补丁"
Fi
    
zip_NAME="AnyKernel3_${{inputs.model}}_${{env.Kernel_FULL_VER}}_Next_${KSUVER}_${SUSVER}.zip""AnyKernel3_${{inputs.model}}_${{env.Kernel_FULL_VER}}_Next_${KSUVER}_${SUSVER}.zip"
artifacts_DIR="$CONFIG_DIR/工件""$CONFIG_DIR/工件"
mkdir-p"$ARTIFACTS_DIR""$ARTIFACTS_DIR"
    
echo“创建可闪存zip: $ZIP_NAME"创建可闪存zip：$ZIP_NAME""
(cd"$GITHUB_WORKSPACE/AnyKernel3"&&zip-r"$ARTIFACTS_DIR/$ZIP_NAME"./*>/dev/null)"$GITHUB_WORKSPACE/AnyKernel3"&&zip-r"$ARTIFACTS_DIR/$ZIP_NAME"./*>/dev/null)
    
#只保留可闪存zip和模型元数据文件(假设已在之前创建)#keep only flashable zip和model metadata文件(假定先前已创建)
查找"$ARTIFACTS_DIR"-最大深度1-类型f！-name"$ZIP_NAME"！-name"${{输入。 型号}}.文本"-删除"$ARTIFACTS_DIR"-最大深度1-type f！-name"$ZIP_NAME"！-name"${{inputs.model}}.txt"-delete
    
#后续步骤的输出(可选)#后续步骤的输出(可选)
回声"zip_name=$ZIP_NAME">>"$GITHUB_OUTPUT""zip_name=$ZIP_NAME">>"$GITHUB_OUTPUT"
    
    - 姓名: 最终构建摘要
壳: 猛击:猛击
跑: |
set-euo管道故障
        {
回声"模型：${{inputs.model}}"
回声"Android：${{env.ANDROID_VER}}"
回声"内核库：${{env.KERNEL_VER}}"
回声"内核已满：${{env.KERNEL_FULL_VER}}"
回声"内核未命名：${{env.KERNEL_UNAME}}"
回声"KSU版本：${KSUVER：-unknown}"
回声"SUSFS版本：${SUSER：-unknown}"
回声"优化：${{inputs.optimize_level}}"
回声"图像SHA256：${{steps.Collect_stats.outs.Image_sha256}}"
回声"编译器：${CLANG_VERSION：-未知}"
回声"警告：${{steps.collect_stats.outputs.warnings}}"
}|tee summary.txt
        {
回声"###内核生成摘要"
回显“”
回声“”-模型：${{输入.模型}}
回声"-安卓：${{env.ANDROID_VER}}"
回声"-内核版本：${{步。save_metadata.输出.Kernel_version}}"
回声"-内核未命名：${{env.KERNEL_UNAME}}"
echo”-KSU版本：${KSUVER：-未知}”
回声"-SUSFS版本：${SUSVER：-未知}}”
回声"-优化：${{inputs.optimize_level}}"
回声"-图像SHA256：${{steps。collect_stats。outs.Image_sha256}}"
回声"-警告：${{steps.collect_stats.outputs.warnings}}"
}>>"$GITHUB_STEP_SUMMARY"
    
    - 姓名: 上传工件
如果: success()&&steps.create_zip.conclusion=='成功'success()&&steps.create_zip.conclusion=='成功''成功'
uses: 操作/上载工件@v4
和……一起:
姓名: 内核-${{env.CONFIG}}{{env.CONFIG}}
路径: ${{env.CONFIG}}/工件/{{env.CONFIG}}/工件/
